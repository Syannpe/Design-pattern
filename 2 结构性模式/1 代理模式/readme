5.1.1 概述
由于某些原因需要给某对象提供一个代理以控制对该对象的访问。
这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。
Java中的代理按照代理类生成时机不同又分为静态代理和动态代理。静态代理代理类在编译期就生成，而动态代理代理类则是在Java运行时动态生成。动态代理又有JDK代理和CGLik代理两种。
5.1.2 结构
代理(Proxy)模式分为三种角色:
·抽象主题(subject)类: 通过接口或抽象类声明真实主题和代理对象实现的业务方法。
·真实主题(Real subject)类: 实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。
·代理(Proxy)类:提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能。
优点:
。代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用
。代理对象可以扩展目标对象的功能;
代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度;
缺点:
增加了系统的复杂度，